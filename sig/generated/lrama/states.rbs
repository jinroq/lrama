# Generated from lib/lrama/states.rb with RBS::Inline

module Lrama
  # States is passed to a template file
  #
  # "Efficient Computation of LALR(1) Look-Ahead Sets"
  #   https://dl.acm.org/doi/pdf/10.1145/69622.357187
  class States
    type state_id = Integer

    type rule_id = Integer

    type reduce = [ state_id, rule_id ]

    include Grammar::_DelegatedMethods

    @grammar: Grammar

    @tracer: Tracer

    @states: Array[State]

    @direct_read_sets: Hash[State::Action::Goto, Bitmap::bitmap]

    @reads_relation: Hash[State::Action::Goto, Array[State::Action::Goto]]

    @read_sets: Hash[State::Action::Goto, Bitmap::bitmap]

    @includes_relation: Hash[State::Action::Goto, Array[State::Action::Goto]]

    @lookback_relation: Hash[reduce, Array[State::Action::Goto]]

    @follow_sets: Hash[State::Action::Goto, Bitmap::bitmap]

    @la: Hash[reduce, Bitmap::bitmap]

    extend Forwardable

    include Lrama::Tracer::Duration

    attr_reader states: Array[State]

    attr_reader reads_relation: Hash[State::Action::Goto, Array[State::Action::Goto]]

    attr_reader includes_relation: Hash[State::Action::Goto, Array[State::Action::Goto]]

    attr_reader lookback_relation: Hash[reduce, Array[State::Action::Goto]]

    # @rbs (Grammar grammar, Tracer tracer) -> void
    def initialize: (Grammar grammar, Tracer tracer) -> void

    # @rbs () -> void
    def compute: () -> void

    # @rbs () -> void
    def compute_ielr: () -> void

    # @rbs () -> Integer
    def states_count: () -> Integer

    # @rbs () -> Hash[State::Action::Goto, Array[Grammar::Symbol]]
    def direct_read_sets: () -> Hash[State::Action::Goto, Array[Grammar::Symbol]]

    # @rbs () -> Hash[State::Action::Goto, Array[Grammar::Symbol]]
    def read_sets: () -> Hash[State::Action::Goto, Array[Grammar::Symbol]]

    # @rbs () -> Hash[State::Action::Goto, Array[Grammar::Symbol]]
    def follow_sets: () -> Hash[State::Action::Goto, Array[Grammar::Symbol]]

    # @rbs () -> Hash[reduce, Array[Grammar::Symbol]]
    def la: () -> Hash[reduce, Array[Grammar::Symbol]]

    # @rbs () -> Integer
    def sr_conflicts_count: () -> Integer

    # @rbs () -> Integer
    def rr_conflicts_count: () -> Integer

    # @rbs (Logger logger) -> void
    def validate!: (Logger logger) -> void

    private

    # @rbs (Grammar::Symbol accessing_symbol, Array[Item] kernels, Hash[Array[Item], State] states_created) -> [State, bool]
    def create_state: (Grammar::Symbol accessing_symbol, Array[Item] kernels, Hash[Array[Item], State] states_created) -> [ State, bool ]

    # @rbs (State state) -> void
    def setup_state: (State state) -> void

    # @rbs (Array[State] states, State state) -> void
    def enqueue_state: (Array[State] states, State state) -> void

    # @rbs () -> void
    def compute_lr0_states: () -> void

    # @rbs () -> Array[State::Action::Goto]
    def nterm_transitions: () -> Array[State::Action::Goto]

    # @rbs () -> void
    def compute_look_ahead_sets: () -> void

    # @rbs () -> void
    def compute_direct_read_sets: () -> void

    # @rbs () -> void
    def compute_reads_relation: () -> void

    # @rbs () -> void
    def compute_read_sets: () -> void

    # Execute transition of state by symbols
    # then return final state.
    #
    # @rbs (State state, Array[Grammar::Symbol] symbols) -> State
    def transition: (State state, Array[Grammar::Symbol] symbols) -> State

    # @rbs () -> void
    def compute_includes_relation: () -> void

    # @rbs () -> void
    def compute_lookback_relation: () -> void

    # @rbs () -> void
    def compute_follow_sets: () -> void

    # @rbs () -> void
    def compute_la: () -> void

    # @rbs (Bitmap::bitmap bit) -> Array[Grammar::Symbol]
    def bitmap_to_terms: (Bitmap::bitmap bit) -> Array[Grammar::Symbol]

    # @rbs () -> void
    def compute_conflicts: () -> void

    # @rbs () -> void
    def compute_shift_reduce_conflicts: () -> void

    # @rbs () -> void
    def compute_reduce_reduce_conflicts: () -> void

    # @rbs () -> void
    def compute_default_reduction: () -> void

    # @rbs () -> void
    def clear_conflicts: () -> void

    # Definition 3.15 (Predecessors)
    #
    # @rbs () -> void
    def compute_predecessors: () -> void

    # Definition 3.16 (follow_kernel_items)
    #
    # @rbs () -> void
    def compute_follow_kernel_items: () -> void

    # @rbs () -> Hash[State::Action::Goto, Array[State::Action::Goto]]
    def compute_goto_internal_relation: () -> Hash[State::Action::Goto, Array[State::Action::Goto]]

    # @rbs () -> Hash[State::Action::Goto, Bitmap::bitmap]
    def compute_goto_bitmaps: () -> Hash[State::Action::Goto, Bitmap::bitmap]

    # Definition 3.20 (always_follows, one closure)
    #
    # @rbs () -> void
    def compute_always_follows: () -> void

    # @rbs () -> Hash[State::Action::Goto, Array[State::Action::Goto]]
    def compute_goto_successor_or_internal_relation: () -> Hash[State::Action::Goto, Array[State::Action::Goto]]

    # @rbs () -> Hash[State::Action::Goto, Bitmap::bitmap]
    def compute_transition_bitmaps: () -> Hash[State::Action::Goto, Bitmap::bitmap]

    # Definition 3.24 (goto_follows, via always_follows)
    #
    # @rbs () -> void
    def compute_goto_follows: () -> void

    # @rbs () -> Hash[State::Action::Goto, Array[State::Action::Goto]]
    def compute_goto_internal_or_predecessor_dependencies: () -> Hash[State::Action::Goto, Array[State::Action::Goto]]

    # @rbs () -> Hash[State::Action::Goto, Bitmap::bitmap]
    def compute_always_follows_bitmaps: () -> Hash[State::Action::Goto, Bitmap::bitmap]

    # @rbs () -> void
    def split_states: () -> void

    # @rbs () -> void
    def compute_inadequacy_annotations: () -> void

    # @rbs (State state, State::lookahead_set filtered_lookaheads) -> void
    def merge_lookaheads: (State state, State::lookahead_set filtered_lookaheads) -> void

    # @rbs (State state, State::Action::Shift | State::Action::Goto transition, State next_state) -> void
    def compute_state: (State state, State::Action::Shift | State::Action::Goto transition, State next_state) -> void

    # @rbs (Logger logger) -> void
    def validate_conflicts_within_threshold!: (Logger logger) -> void

    # @rbs (Logger logger) -> bool
    def conflicts_within_threshold?: (Logger logger) -> bool

    # @rbs (Logger logger) -> bool
    def sr_conflicts_within_threshold?: (Logger logger) -> bool

    # @rbs (Logger logger) -> bool
    def rr_conflicts_within_threshold?: (Logger logger) -> bool

    # @rbs () -> void
    def clear_look_ahead_sets: () -> void
  end
end
