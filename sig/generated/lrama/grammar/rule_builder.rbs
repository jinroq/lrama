# Generated from lib/lrama/grammar/rule_builder.rb with RBS::Inline

module Lrama
  class Grammar
    class RuleBuilder
      @position_in_original_rule_rhs: Integer?

      @skip_preprocess_references: bool

      @rules: Array[Rule]

      @rule_builders_for_parameterized: Array[RuleBuilder]

      @rule_builders_for_derived_rules: Array[RuleBuilder]

      @parameterized_rules: Array[Rule]

      @midrule_action_rules: Array[Rule]

      @replaced_rhs: Array[Lexer::Token::Base]?

      attr_accessor lhs: Lexer::Token::Base?

      attr_accessor line: Integer?

      attr_reader rule_counter: Counter

      attr_reader midrule_action_counter: Counter

      attr_reader parameterized_resolver: Grammar::Parameterized::Resolver

      attr_reader lhs_tag: Lexer::Token::Tag?

      attr_reader rhs: Array[Lexer::Token::Base]

      attr_reader user_code: Lexer::Token::UserCode?

      attr_reader precedence_sym: Grammar::Symbol?

      # @rbs (Counter rule_counter, Counter midrule_action_counter, Grammar::Parameterized::Resolver parameterized_resolver, ?Integer position_in_original_rule_rhs, ?lhs_tag: Lexer::Token::Tag?, ?skip_preprocess_references: bool) -> void
      def initialize: (Counter rule_counter, Counter midrule_action_counter, Grammar::Parameterized::Resolver parameterized_resolver, ?Integer position_in_original_rule_rhs, ?lhs_tag: Lexer::Token::Tag?, ?skip_preprocess_references: bool) -> void

      # @rbs (Lexer::Token::Base rhs) -> void
      def add_rhs: (Lexer::Token::Base rhs) -> void

      # @rbs (Lexer::Token::UserCode? user_code) -> void
      def user_code=: (Lexer::Token::UserCode? user_code) -> void

      # @rbs (Grammar::Symbol? precedence_sym) -> void
      def precedence_sym=: (Grammar::Symbol? precedence_sym) -> void

      # @rbs () -> void
      def complete_input: () -> void

      # @rbs () -> void
      def setup_rules: () -> void

      # @rbs () -> Array[Grammar::Rule]
      def rules: () -> Array[Grammar::Rule]

      # @rbs () -> bool
      def has_inline_rules?: () -> bool

      private

      # @rbs () -> void
      def freeze_rhs: () -> void

      # @rbs () -> void
      def preprocess_references: () -> void

      # @rbs () -> void
      def build_rules: () -> void

      # rhs is a mixture of variety type of tokens like `Ident`, `InstantiateRule`, `UserCode` and so on.
      # `#process_rhs` replaces some kind of tokens to `Ident` so that all `@replaced_rhs` are `Ident` or `Char`.
      #
      # @rbs () -> void
      def process_rhs: () -> void

      # @rbs () -> void
      def resolve_inline_rules: () -> void

      # @rbs () -> void
      def numberize_references: () -> void

      # @rbs () -> void
      def flush_user_code: () -> void
    end
  end
end
