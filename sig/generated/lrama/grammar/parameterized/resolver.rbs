# Generated from lib/lrama/grammar/parameterized/resolver.rb with RBS::Inline

module Lrama
  class Grammar
    class Parameterized
      class Resolver
        attr_accessor rules: Array[Rule]

        attr_accessor created_lhs_list: Array[Lexer::Token::Base]

        # @rbs () -> void
        def initialize: () -> void

        # @rbs (Rule rule) -> Array[Rule]
        def add_rule: (Rule rule) -> Array[Rule]

        # @rbs (Lexer::Token::InstantiateRule token) -> Rule?
        def find_rule: (Lexer::Token::InstantiateRule token) -> Rule?

        # @rbs (Lexer::Token::Base token) -> Rule?
        def find_inline: (Lexer::Token::Base token) -> Rule?

        # @rbs (String lhs_s_value) -> Lexer::Token::Base?
        def created_lhs: (String lhs_s_value) -> Lexer::Token::Base?

        # @rbs () -> Array[Rule]
        def redefined_rules: () -> Array[Rule]

        private

        # @rbs (Array[Rule] rules, Lexer::Token::InstantiateRule token) -> Array[Rule]
        def select_rules: (Array[Rule] rules, Lexer::Token::InstantiateRule token) -> Array[Rule]

        # @rbs (Array[Rule] rules) -> Array[Rule]
        def reject_inline_rules: (Array[Rule] rules) -> Array[Rule]

        # @rbs (Array[Rule] rules, String rule_name) -> Array[Rule]
        def select_rules_by_name: (Array[Rule] rules, String rule_name) -> Array[Rule]
      end
    end
  end
end
