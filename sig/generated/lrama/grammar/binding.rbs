# Generated from lib/lrama/grammar/binding.rb with RBS::Inline

module Lrama
  class Grammar
    class Binding
      @actual_args: Array[Lexer::Token]

      @param_to_arg: Hash[String, Lexer::Token]

      # @rbs (Array[Lexer::Token] params, Array[Lexer::Token] actual_args) -> void
      def initialize: (Array[Lexer::Token] params, Array[Lexer::Token] actual_args) -> void

      # @rbs (Lexer::Token sym) -> Lexer::Token
      def resolve_symbol: (Lexer::Token sym) -> Lexer::Token

      # @rbs (Lexer::Token::InstantiateRule token) -> String
      def concatenated_args_str: (Lexer::Token::InstantiateRule token) -> String

      private

      # @rbs (Lexer::Token::InstantiateRule sym) -> Lexer::Token::InstantiateRule
      def create_instantiate_rule: (Lexer::Token::InstantiateRule sym) -> Lexer::Token::InstantiateRule

      # @rbs (Array[Lexer::Token]) -> Array[Lexer::Token]
      def resolve_args: (Array[Lexer::Token]) -> Array[Lexer::Token]

      # @rbs (Lexer::Token sym) -> Lexer::Token
      def find_arg_for_param: (Lexer::Token sym) -> Lexer::Token

      # @rbs (Array[Lexer::Token] params, Array[Lexer::Token] actual_args) -> Hash[String, Lexer::Token?]
      def build_param_to_arg: (Array[Lexer::Token] params, Array[Lexer::Token] actual_args) -> Hash[String, Lexer::Token?]

      # @rbs (Lexer::Token::InstantiateRule token) -> String
      def format_args: (Lexer::Token::InstantiateRule token) -> String

      # @rbs (Lexer::Token::InstantiateRule token) -> Array[String]
      def token_to_args_s_values: (Lexer::Token::InstantiateRule token) -> Array[String]
    end
  end
end
