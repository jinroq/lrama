# Generated from lib/lrama/grammar.rb with RBS::Inline

module Lrama
  # Grammar is the result of parsing an input grammar file
  class Grammar
    interface _DelegatedMethods
      def rules: () -> Array[Rule]

      def accept_symbol: () -> Grammar::Symbol

      def eof_symbol: () -> Grammar::Symbol

      def undef_symbol: () -> Grammar::Symbol

      # delegate to @symbols_resolver
      def symbols: () -> Array[Grammar::Symbol]

      def terms: () -> Array[Grammar::Symbol]

      def nterms: () -> Array[Grammar::Symbol]

      def find_symbol_by_s_value!: (::String s_value) -> Grammar::Symbol

      def ielr_defined?: () -> bool
    end

    include Symbols::Resolver::_DelegatedMethods

    @rule_counter: Counter

    @percent_codes: Array[PercentCode]

    @printers: Array[Printer]

    @destructors: Array[Destructor]

    @error_tokens: Array[ErrorToken]

    @symbols_resolver: Symbols::Resolver

    @types: Array[Type]

    @rule_builders: Array[RuleBuilder]

    @rules: Array[Rule]

    @sym_to_rules: Hash[Integer, Array[Rule]]

    @parameterized_resolver: Parameterized::Resolver

    @empty_symbol: Grammar::Symbol

    @eof_symbol: Grammar::Symbol

    @error_symbol: Grammar::Symbol

    @undef_symbol: Grammar::Symbol

    @accept_symbol: Grammar::Symbol

    @aux: Auxiliary

    @no_stdlib: bool

    @locations: bool

    @define: Hash[String, String]

    @required: bool

    @union: Union

    @precedences: Array[Precedence]

    extend Forwardable

    attr_reader percent_codes: Array[PercentCode]

    attr_reader eof_symbol: Grammar::Symbol

    attr_reader error_symbol: Grammar::Symbol

    attr_reader undef_symbol: Grammar::Symbol

    attr_reader accept_symbol: Grammar::Symbol

    attr_reader aux: Auxiliary

    attr_reader parameterized_resolver: Parameterized::Resolver

    attr_reader precedences: Array[Precedence]

    attr_accessor union: Union

    attr_accessor expect: Integer

    attr_accessor printers: Array[Printer]

    attr_accessor error_tokens: Array[ErrorToken]

    attr_accessor lex_param: String

    attr_accessor parse_param: String

    attr_accessor initial_action: Grammar::Code::InitialActionCode

    attr_accessor after_shift: Lexer::Token

    attr_accessor before_reduce: Lexer::Token

    attr_accessor after_reduce: Lexer::Token

    attr_accessor after_shift_error_token: Lexer::Token

    attr_accessor after_pop_stack: Lexer::Token

    attr_accessor symbols_resolver: Symbols::Resolver

    attr_accessor types: Array[Type]

    attr_accessor rules: Array[Rule]

    attr_accessor rule_builders: Array[RuleBuilder]

    attr_accessor sym_to_rules: Hash[Integer, Array[Rule]]

    attr_accessor no_stdlib: bool

    attr_accessor locations: bool

    attr_accessor define: Hash[String, String]

    attr_accessor required: bool

    # @rbs (Counter rule_counter, bool locations, Hash[String, String] define) -> void
    def initialize: (Counter rule_counter, bool locations, Hash[String, String] define) -> void

    # @rbs (Counter rule_counter, Counter midrule_action_counter) -> RuleBuilder
    def create_rule_builder: (Counter rule_counter, Counter midrule_action_counter) -> RuleBuilder

    # @rbs (id: Lexer::Token, code: Lexer::Token::UserCode) -> Array[PercentCode]
    def add_percent_code: (id: Lexer::Token, code: Lexer::Token::UserCode) -> Array[PercentCode]

    # @rbs (ident_or_tags: Array[Lexer::Token::Ident|Lexer::Token::Tag], token_code: Lexer::Token::UserCode, lineno: Integer) -> Array[Destructor]
    def add_destructor: (ident_or_tags: Array[Lexer::Token::Ident | Lexer::Token::Tag], token_code: Lexer::Token::UserCode, lineno: Integer) -> Array[Destructor]

    # @rbs (ident_or_tags: Array[Lexer::Token::Ident|Lexer::Token::Tag], token_code: Lexer::Token::UserCode, lineno: Integer) -> Array[Printer]
    def add_printer: (ident_or_tags: Array[Lexer::Token::Ident | Lexer::Token::Tag], token_code: Lexer::Token::UserCode, lineno: Integer) -> Array[Printer]

    # @rbs (ident_or_tags: Array[Lexer::Token::Ident|Lexer::Token::Tag], token_code: Lexer::Token::UserCode, lineno: Integer) -> Array[ErrorToken]
    def add_error_token: (ident_or_tags: Array[Lexer::Token::Ident | Lexer::Token::Tag], token_code: Lexer::Token::UserCode, lineno: Integer) -> Array[ErrorToken]

    # @rbs (id: Lexer::Token, tag: Lexer::Token::Tag) -> Array[Type]
    def add_type: (id: Lexer::Token, tag: Lexer::Token::Tag) -> Array[Type]

    # @rbs (Grammar::Symbol sym, Integer precedence, String s_value, Integer lineno) -> Precedence
    def add_nonassoc: (Grammar::Symbol sym, Integer precedence, String s_value, Integer lineno) -> Precedence

    # @rbs (Grammar::Symbol sym, Integer precedence, String s_value, Integer lineno) -> Precedence
    def add_left: (Grammar::Symbol sym, Integer precedence, String s_value, Integer lineno) -> Precedence

    # @rbs (Grammar::Symbol sym, Integer precedence, String s_value, Integer lineno) -> Precedence
    def add_right: (Grammar::Symbol sym, Integer precedence, String s_value, Integer lineno) -> Precedence

    # @rbs (Grammar::Symbol sym, Integer precedence, String s_value, Integer lineno) -> Precedence
    def add_precedence: (Grammar::Symbol sym, Integer precedence, String s_value, Integer lineno) -> Precedence

    # @rbs (Grammar::Symbol sym, Precedence precedence) -> (Precedence | bot)
    def set_precedence: (Grammar::Symbol sym, Precedence precedence) -> (Precedence | bot)

    # @rbs (Grammar::Code::NoReferenceCode code, Integer lineno) -> Union
    def set_union: (Grammar::Code::NoReferenceCode code, Integer lineno) -> Union

    # @rbs (RuleBuilder builder) -> Array[RuleBuilder]
    def add_rule_builder: (RuleBuilder builder) -> Array[RuleBuilder]

    # @rbs (Parameterized::Rule rule) -> Array[Parameterized::Rule]
    def add_parameterized_rule: (Parameterized::Rule rule) -> Array[Parameterized::Rule]

    # @rbs () -> Array[Parameterized::Rule]
    def parameterized_rules: () -> Array[Parameterized::Rule]

    # @rbs (Array[Parameterized::Rule] rules) -> Array[Parameterized::Rule]
    def prepend_parameterized_rules: (Array[Parameterized::Rule] rules) -> Array[Parameterized::Rule]

    # @rbs (Integer prologue_first_lineno) -> Integer
    def prologue_first_lineno=: (Integer prologue_first_lineno) -> Integer

    # @rbs (String prologue) -> String
    def prologue=: (String prologue) -> String

    # @rbs (Integer epilogue_first_lineno) -> Integer
    def epilogue_first_lineno=: (Integer epilogue_first_lineno) -> Integer

    # @rbs (String epilogue) -> String
    def epilogue=: (String epilogue) -> String

    # @rbs () -> void
    def prepare: () -> void

    # TODO: More validation methods
    #
    # * Validation for no_declared_type_reference
    #
    # @rbs () -> void
    def validate!: () -> void

    # @rbs (Grammar::Symbol sym) -> Array[Rule]
    def find_rules_by_symbol!: (Grammar::Symbol sym) -> Array[Rule]

    # @rbs (Grammar::Symbol sym) -> Array[Rule]?
    def find_rules_by_symbol: (Grammar::Symbol sym) -> Array[Rule]?

    # @rbs (String s_value) -> Array[Rule]
    def select_rules_by_s_value: (String s_value) -> Array[Rule]

    # @rbs () -> Array[String]
    def unique_rule_s_values: () -> Array[String]

    # @rbs () -> bool
    def ielr_defined?: () -> bool

    private

    # @rbs () -> Array[Grammar::Symbol]
    def compute_nullable: () -> Array[Grammar::Symbol]

    # @rbs () -> Array[Grammar::Symbol]
    def compute_first_set: () -> Array[Grammar::Symbol]

    # @rbs () -> Array[RuleBuilder]
    def setup_rules: () -> Array[RuleBuilder]

    # @rbs () -> Grammar::Symbol
    def append_special_symbols: () -> Grammar::Symbol

    # @rbs () -> void
    def resolve_inline_rules: () -> void

    # @rbs () -> void
    def normalize_rules: () -> void

    # Collect symbols from rules
    #
    # @rbs () -> void
    def collect_symbols: () -> void

    # @rbs () -> void
    def set_lhs_and_rhs: () -> void

    # Rule inherits precedence from the last term in RHS.
    #
    # https://www.gnu.org/software/bison/manual/html_node/How-Precedence.html
    #
    # @rbs () -> void
    def fill_default_precedence: () -> void

    # @rbs () -> Array[Grammar::Symbol]
    def fill_symbols: () -> Array[Grammar::Symbol]

    # @rbs () -> Array[Rule]
    def fill_sym_to_rules: () -> Array[Rule]

    # @rbs () -> void
    def validate_no_precedence_for_nterm!: () -> void

    # @rbs () -> void
    def validate_rule_lhs_is_nterm!: () -> void

    # # @rbs () -> void
    def validate_duplicated_precedence!: () -> untyped

    # @rbs () -> void
    def set_locations: () -> void
  end
end
