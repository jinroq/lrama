# Generated from lib/lrama/counterexamples/example.rb with RBS::Inline

module Lrama
  class Counterexamples
    class Example
      @path1: ::Array[StateItem]

      @path2: ::Array[StateItem]

      @conflict: State::conflict

      @conflict_symbol: Grammar::Symbol

      @counterexamples: Counterexamples

      @derivations1: Derivation

      @derivations2: Derivation

      attr_reader path1: ::Array[StateItem]

      attr_reader path2: ::Array[StateItem]

      attr_reader conflict: State::conflict

      attr_reader conflict_symbol: Grammar::Symbol

      # path1 is shift conflict when S/R conflict
      # path2 is always reduce conflict
      #
      # @rbs (Array[StateItem]? path1, Array[StateItem]? path2, State::conflict conflict, Grammar::Symbol conflict_symbol, Counterexamples counterexamples) -> void
      def initialize: (Array[StateItem]? path1, Array[StateItem]? path2, State::conflict conflict, Grammar::Symbol conflict_symbol, Counterexamples counterexamples) -> void

      # @rbs () -> (:shift_reduce | :reduce_reduce)
      def type: () -> (:shift_reduce | :reduce_reduce)

      # @rbs () -> State::Item
      def path1_item: () -> State::Item

      # @rbs () -> State::Item
      def path2_item: () -> State::Item

      # @rbs () -> Derivation
      def derivations1: () -> Derivation

      # @rbs () -> Derivation
      def derivations2: () -> Derivation

      private

      # @rbs (Array[StateItem] state_items) -> Derivation
      def _derivations: (Array[StateItem] state_items) -> Derivation

      # @rbs (StateItem state_item, Grammar::Symbol sym) -> Derivation?
      def find_derivation_for_symbol: (StateItem state_item, Grammar::Symbol sym) -> Derivation?
    end
  end
end
