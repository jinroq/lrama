# Generated from lib/lrama/state/action/reduce.rb with RBS::Inline

module Lrama
  class State
    class Action
      class Reduce
        @item: States::Item

        @look_ahead: Array[Grammar::Symbol]?

        @look_ahead_sources: Hash[Grammar::Symbol, Array[Action::Goto]]?

        @not_selected_symbols: Array[Grammar::Symbol]

        attr_reader item: States::Item

        attr_reader look_ahead: Array[Grammar::Symbol]?

        attr_reader look_ahead_sources: Hash[Grammar::Symbol, Array[Action::Goto]]?

        attr_reader not_selected_symbols: Array[Grammar::Symbol]

        # https://www.gnu.org/software/bison/manual/html_node/Default-Reductions.html
        attr_accessor default_reduction: bool

        # @rbs (States::Item item) -> void
        def initialize: (States::Item item) -> void

        # @rbs () -> Grammar::Rule
        def rule: () -> Grammar::Rule

        # @rbs (Array[Grammar::Symbol] look_ahead) -> Array[Grammar::Symbol]
        def look_ahead=: (Array[Grammar::Symbol] look_ahead) -> Array[Grammar::Symbol]

        # @rbs (Hash[Grammar::Symbol, Array[Action::Goto]] sources) -> Hash[Grammar::Symbol, Array[Action::Goto]]
        def look_ahead_sources=: (Hash[Grammar::Symbol, Array[Action::Goto]] sources) -> Hash[Grammar::Symbol, Array[Action::Goto]]

        # @rbs (Grammar::Symbol sym) -> Array[Grammar::Symbol]
        def add_not_selected_symbol: (Grammar::Symbol sym) -> Array[Grammar::Symbol]

        # @rbs () -> (::Array[Grammar::Symbol?])
        def selected_look_ahead: () -> ::Array[Grammar::Symbol?]

        # @rbs () -> void
        def clear_conflicts: () -> void
      end
    end
  end
end
