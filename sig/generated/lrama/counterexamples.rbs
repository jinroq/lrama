# Generated from lib/lrama/counterexamples.rb with RBS::Inline

module Lrama
  # See: https://www.cs.cornell.edu/andru/papers/cupex/cupex.pdf
  #      4. Constructing Nonunifying Counterexamples
  class Counterexamples
    PathSearchTimeLimit: ::Integer

    CumulativeTimeLimit: ::Integer

    @states: States

    @iterate_count: Integer

    @total_duration: Float

    @exceed_cumulative_time_limit: bool

    @state_items: Hash[[ State, States::Item ], StateItem]

    @triples: Hash[Integer, Triple]

    @transitions: Hash[[ StateItem, Grammar::Symbol ], StateItem]

    @reverse_transitions: Hash[[ StateItem, Grammar::Symbol ], Set[StateItem]]

    @productions: Hash[StateItem, Set[StateItem]]

    @reverse_productions: Hash[[ State, Grammar::Symbol ], Set[StateItem]]

    attr_reader transitions: Hash[[ StateItem, Grammar::Symbol ], StateItem]

    attr_reader productions: Hash[StateItem, Set[StateItem]]

    # @rbs (States states) -> void
    def initialize: (States states) -> void

    # @rbs () -> "#<Counterexamples>"
    def to_s: () -> "#<Counterexamples>"

    alias inspect to_s

    # @rbs (State conflict_state) -> Array[Example]
    def compute: (State conflict_state) -> Array[Example]

    private

    # @rbs (State state, States::Item item) -> StateItem
    def get_state_item: (State state, States::Item item) -> StateItem

    # For optimization, create all StateItem in advance
    # and use them by fetching an instance from `@state_items`.
    # Do not create new StateItem instance in the shortest path search process
    # to avoid miss hash lookup.
    #
    # @rbs () -> void
    def setup_state_items: () -> void

    # @rbs () -> void
    def setup_transitions: () -> void

    # @rbs () -> void
    def setup_productions: () -> void

    # For optimization, use same Triple if it's already created.
    # Do not create new Triple instance anywhere else
    # to avoid miss hash lookup.
    #
    # @rbs (StateItem state_item, Bitmap::bitmap precise_lookahead_set) -> Triple
    def get_triple: (StateItem state_item, Bitmap::bitmap precise_lookahead_set) -> Triple

    # @rbs (State conflict_state, State::ShiftReduceConflict conflict) -> Example
    def shift_reduce_example: (State conflict_state, State::ShiftReduceConflict conflict) -> Example

    # @rbs (State conflict_state, State::ReduceReduceConflict conflict) -> Example
    def reduce_reduce_examples: (State conflict_state, State::ReduceReduceConflict conflict) -> Example

    # @rbs (Array[StateItem]? reduce_state_items, State conflict_state, States::Item conflict_item) -> Array[StateItem]
    def find_shift_conflict_shortest_path: (Array[StateItem]? reduce_state_items, State conflict_state, States::Item conflict_item) -> Array[StateItem]

    # @rbs (StateItem target) -> Set[StateItem]
    def reachable_state_items: (StateItem target) -> Set[StateItem]

    # @rbs (State conflict_state, States::Item conflict_reduce_item, Grammar::Symbol conflict_term) -> ::Array[StateItem]?
    def shortest_path: (State conflict_state, States::Item conflict_reduce_item, Grammar::Symbol conflict_term) -> ::Array[StateItem]?

    # @rbs (States::Item item, Bitmap::bitmap current_l) -> Bitmap::bitmap
    def follow_l: (States::Item item, Bitmap::bitmap current_l) -> Bitmap::bitmap

    # @rbs [T] (String message) { -> T } -> T
    def with_timeout: [T] (String message) { () -> T } -> T

    # @rbs (Float|Integer duration) -> void
    def increment_total_duration: (Float | Integer duration) -> void
  end
end
